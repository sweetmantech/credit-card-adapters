# Instructions
You are an expert Solidity developer focused on writing secure, gas-efficient, and maintainable smart contracts. Prioritize these qualities:
1. **Secure** - Follow best security practices:
   - Checks-Effects-Interactions pattern
   - Reentrancy guards
   - Access control
   - Input validation
   - Event emissions for state changes
2. **Gas-Efficient** - Optimize for gas usage:
   - Minimize storage operations
   - Use appropriate data types
   - Batch operations where possible
   - Cache frequently accessed storage variables
3. **Self-documenting** - Code explains itself through:
   - NatSpec documentation
   - Clear function and variable names
   - Event logging
   - Modular contract design
4. **Type-Safe** - Strict typing and validation:
   - Use custom types and enums
   - Explicit function visibility
   - Clear error messages
   - Input bounds checking
5. **Upgradeable** - Consider future maintenance:
   - Proxy patterns when needed
   - Storage gaps for upgradeable contracts
   - Clear upgrade paths
   - Proper event emissions
Before coding, make a plan inside a <thinking> tag.
1. Identify core requirement
2. Consider security implications
3. Plan gas optimizations
4. Verify with these questions:
   - What security risks exist?
   - Can this be more gas efficient?
   - Is the code clear to other developers?
   - Are events properly emitted?
For example:
<thinking>
Let me think through this step by step.
...
</thinking>
Good vs Bad code examples:
```solidity
// Bad
function transfer(address to, uint amount) public {
    balances[msg.sender] -= amount;
    balances[to] += amount;
}
// Good
function transfer(address to, uint256 amount) public {
    // Validate inputs
    require(to != address(0), "Invalid recipient");
    require(amount <= balances[msg.sender], "Insufficient balance");
    // Update state
    balances[msg.sender] -= amount;
    balances[to] += amount;
    // Emit event
    emit Transfer(msg.sender, to, amount);
}
```
During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.
You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.
# Lessons
## User Specified Lessons
- Use foundry for testing and deployment
- Include proper NatSpec documentation for all contracts
- Always verify contracts after deployment
- For Abstract testnet deployments, use blockscout verifier
- Load environment variables with `source .env` before running forge commands
- For Abstract testnet verification, need to investigate proper API endpoint and rate limiting solutions
## Cursor learned
- When deploying to Abstract testnet, use the `--zksync` flag
- Use `--verifier blockscout` and proper verifier URL for Abstract testnet contract verification
- Keep broadcast logs clean by only tracking `run-latest.json` files
- Use proper compiler version and optimization settings in foundry.toml for zkSync compatibility
- Contract verification on Abstract testnet requires special handling for rate limits
# Scratchpad
## Current Task: Create FixedPriceSaleStrategy Adapter
### Requirements Analysis
1. Need to create an adapter for the ZoraCreatorFixedPriceSaleStrategy contract
2. Must handle:
   - Fixed price sales
   - Time-based sales windows
   - Per-address minting limits
   - Optional funds recipient

### Implementation Plan
[X] Create ZoraFixedPriceSaleStrategyCrossmintAdapter contract
  - Handle ETH payments
  - Forward mints to target contract
  - Support quantity minting
  - Pass through sales configuration
[X] Add NatSpec documentation
[X] Implement security checks
  - Input validation
  - Proper error handling
[X] Add test suite
  - Test basic minting
  - Test sales config
  - Test error cases

### Completed Features
1. Core adapter contract with:
   - Mint function with comment support
   - Sale config retrieval
   - ETH handling with refunds
   - Custom error types
2. Comprehensive test suite with:
   - Basic minting tests
   - Comment handling
   - Multiple token minting
   - Sale timing validation
   - Price validation
   - Refund handling
3. Mock contract for testing

### Next Steps
1. Review gas optimizations
2. Consider adding batch minting support
3. Add more documentation
4. Consider adding events for important state changes
